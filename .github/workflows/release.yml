#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright The original authors
#
# Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0
#

name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version"
        required: true
      next:
        description: "Next version"
        required: false

env:
  JAVA_VERSION: '21'
  JAVA_DISTRO: 'temurin'
  GRAAL_VERSION: '22.3.0'

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      HEAD: ${{ steps.version.outputs.HEAD }}
      RELEASE_VERSION: ${{ steps.version.outputs.RELEASE_VERSION }}
      PLAIN_VERSION: ${{ steps.version.outputs.PLAIN_VERSION }}
      NEXT_VERSION: ${{ steps.version.outputs.NEXT_VERSION }}
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v4

      - name: 'Set up Java'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}
          cache: maven

      - name: 'Set release version'
        id: version
        run: |
          RELEASE_VERSION=${{ github.event.inputs.version }}
          NEXT_VERSION=${{ github.event.inputs.next }}
          PLAIN_VERSION=`echo ${RELEASE_VERSION} | awk 'match($0, /^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)/) { print substr($0, RSTART, RLENGTH); }'`
          COMPUTED_NEXT_VERSION="${PLAIN_VERSION}-SNAPSHOT"
          if [ -z $NEXT_VERSION ]
          then
            NEXT_VERSION=$COMPUTED_NEXT_VERSION
          fi
          ./mvnw -ntp -B versions:set versions:commit -DnewVersion=$RELEASE_VERSION
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Action"
          git commit -a -m "üèÅ Releasing version $RELEASE_VERSION"
          git push origin HEAD:main
          HEAD=$(git rev-parse HEAD)
          echo "HEAD=$HEAD" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "PLAIN_VERSION=$PLAIN_VERSION" >> $GITHUB_OUTPUT

  build:
    needs: [ version ]
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.version.outputs.HEAD }}

      - name: 'Add Developer Command Prompt for Microsoft Visual C++ '
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: 'Set up Graal'
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: maven

      - name: 'Build'
        if: ${{ runner.os == 'Linux' }}
        run: ./mvnw -ntp -B --file pom.xml test

  # Build native executable per runner
  package:
    needs: [ version, build ]
    name: 'Build with Graal on ${{ matrix.os }}'
    strategy:
      fail-fast: true
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.version.outputs.HEAD }}

      - name: 'Add Developer Command Prompt for Microsoft Visual C++ '
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: 'Set up Graal'
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: maven

      - name: 'Build Native Image (Linux, macOS, Windows)'
        run: ./mvnw -ntp -B --file pom.xml -Pnative package -DskipTests

      - name: 'Create distribution'
        run: ./mvnw -ntp -B --file pom.xml -Pdist package -DskipTests -DskipShaded

      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ runner.os }}-${{ runner.arch }}
          path: |
            target/*.zip
            target/*.tar.gz

  # Collect all executables and release
  release:
    needs: [ version, package ]
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.version.outputs.HEAD }}
          fetch-depth: 0

      # checkout will clobber downloaded artifacts
      # we have to download them again
      - name: 'Download all build artifacts'
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: artifacts-*
          merge-multiple: true

      - name: 'Set up Java'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}
          cache: maven

      - name: 'Prepare Staging for JReleaser'
        run: for filename in target/original-*.jar; do rm "${filename//original-/}" && mv "$filename" "${filename//original-/}"; done && ./mvnw -Ppublication deploy -DskipTests -DskipShaded

      - name: 'Release with JReleaser'
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.JRELEASER_MAVENCENTRAL_PASSWORD }}
          JRELEASER_HOMEBREW_GITHUB_TOKEN: ${{ secrets.JRELEASER_HOMEBREW_GITHUB_TOKEN }}
        run: ./mvnw -ntp -B --file pom.xml -Prelease -DartifactsDir=artifacts jreleaser:full-release

      - name: 'JReleaser output'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-logs
          path: |
            target/jreleaser/trace.log
            target/jreleaser/output.properties

      - name: 'Set next version'
        env:
          NEXT_VERSION: ${{ needs.version.outputs.NEXT_VERSION }}
        run: |
          ./mvnw -ntp -B versions:set versions:commit -DnewVersion=$NEXT_VERSION
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Action"
          git commit -a -m "‚¨ÜÔ∏è  Next version $NEXT_VERSION"
          git push origin HEAD:main